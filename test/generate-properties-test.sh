#!/usr/bin/env bash

readonly self="${0}"
readonly relativeDir="$(dirname "${self}")"
readonly selfDir="$(cd "${relativeDir}" && pwd )"
readonly properties="${selfDir}/properties-test.sh"

readonly outputFile="properties_test.go"

cat <<EOF > "${outputFile}"
// Code generated by generate-properties-test.sh. DO NOT EDIT.
package main

import (
	"os"
	"testing"
)
EOF

function capitalize() {
  local pomFile="${1}"
  local version="$(echo "${pomFile}"| sed -nE 's/.*-([^-]+\.?){1,3}\.pom/\1/p')"
  local artifact="${pomFile%%-"${version}"*}"
  for part in $(echo "${artifact//-/ }"); do
    printf "$(echo "${part:0:1}"| tr 'a-z' 'A-Z')${part:1}"
  done
}

function fileOpen() {
  local pomFile="${1}"
  cat <<EOF
	reader, err := os.Open("${pomFile}")
	if err != nil {
		t.Fatalf("os.Open ${pomFile}: %v", err)
	}
	//goland:noinspection GoUnhandledErrorResult
	defer reader.Close()
	project, err := ReadPom(reader)
	if err != nil {
		t.Fatalf("ReadPom: %v", err)
	}
	properties := project.Properties
	if properties == nil {
		t.Fatal("project.Properties")
	}
EOF
}

function getProperties() {
  local pomFile="${1}"
  local propertyType="${2}"
  "${properties}" "${pomFile}" |
    grep "^${propertyType} " |
    cut -d ' ' -f2 |
    sed 's/:/: /g' |
    column -t |
    sed 's/^/\t\t/g'
}

function checkValues() {
  cat<<EOF
	if len(expected) == 0 {
		propSize := len(properties.Property)
		if 0 < propSize {
			t.Errorf("expected empty properties, but got %d", propSize)
			return
		}
	}
	for name, value := range expected {
		if properties.Get(name) != value {
			t.Errorf("expected %s for name %s, but got %s", value, name, properties.Get(name))
		}
	}
EOF
}

function createTestFunction() {
  local pomFile="${1}"
  local testName="TestProperties_UnmarshalXML_$(capitalize "$(basename "${pomFile}")")"
  echo ""
  echo "func ${testName}(t *testing.T) {"
  fileOpen "${pomFile}"
  echo -e "\texpected := map[string]string{"
  getProperties "${pomFile}" 1
  echo -e "\t}"
  checkValues
  echo "}"
}

while read pomFile; do
  createTestFunction "${pomFile}" >> "${outputFile}"
done < <(find "${relativeDir}" -type f -name "*.pom")

go fmt "${outputFile}"
